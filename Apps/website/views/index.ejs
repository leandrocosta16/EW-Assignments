<%- include('header'); -%>

<!--<p><button type="button" class="btn btn-secondary" onclick="moveCar()">Mover Carro</button></p>-->

<div id="config-main">
<canvas id="c" class="canvas-bg" style="z-index:1;"></canvas>
<div id="config">
<h2 style="margin-top:0px;margin-bottom:0px;">SPWS SIMULATION</h2>
<br>
<h4>Configuration</h4>
<div id="config-inner">
<form id="config-form" style="margin:0px;">
<p><b>Google Maps Zoom:</b> <input type="text" name="zoom" value="19"></p>
<p><b>Main timmer (ms):</b> <input type="text" name="timmer" value="1000"></p>
<p><b>Car velocity (ms):</b> <input type="text" name="carVel" value="100"></p>
<p><b>Car meters per update:</b> <input type="text" name="carDist" value="0.4"></p>
<p><b>Pedestre velocity (ms):</b> <input type="text" name="pedestreVel" value="100"></p>
<p><b>Pedestre distance per update (coords):</b> <input type="text" name="pedestreDist" value="0.000001"></p>
<p><b>Traffic lights timmer (sec):</b> <input type="text" name="lightsTimmer" value="5"></p>
<p><b>Car radius (meters):</b> <input type="text" name="carRadius" value="5"></p>
<p><b>Pedestre radius (meters):</b> <input type="text" name="pedestreRadius" value="5"></p>
<p><b>Simulate car stops?:</b> <input type="text" name="stops" value="false"></p>
</form>
<p style="margin-bottom:0px;"><button id="simulStat">START</button></p>
</div>
</div>
</div>

<div id="simulation" style="visibility: hidden;">
<!--<h2 style="margin-top:0px;margin-bottom:0px;">SIMULATION</h2>-->

<div id="trafficLight" class="no-light"></div>

<div style="text-align:center;position:fixed;top:0px;right:0px;z-index:200;">
    <div id="consola-carro" style="text-align:left;display:inline-block;width:587px;height:320px;background:#333333 url(/images/painel.png);color:#ffffff;padding:70px 110px;">
        <div id="route-select">
          <h4>Select route</h4>
          <div style="text-align:center;">
          <div style="display:inline-block;text-align:left;">
              <b>START:</b>
              <br>
              <input id="start" value="Estação Ferroviária De Braga" />
              <br>
              <b>END:</b>
              <br>
              <input id="end" value="Universidade do Minho" />
              <br>
              <div id="error-msg"></div>
              <button id="start-btn" class="btn btn-success" onclick="setRoutes();" style="margin-top:10px;">Start</button>
            </div>
        </div>
        </div>

        <div id="route-data" style="display:none;">
            <p><b>POSITION:</b>
                <br><span id="car-lat">0.0</span> LAT, <span id="car-long">0.0</span> LONG</p>
            <p><b>STATUS:</b> <span id="noteficationStatus" class="safe-green">Safe, no pedestrians.</span></p>
            <p><b>TRAFFIC LIGHT:</b> <span id="carLight">None</span></p>
        </div>
    </div>
</div>

<div style="text-align:center;position:fixed;bottom:0px;right:0px;z-index:190;">
    <div id="consola-carro" style="text-align:left;display:inline-block;width:213px;height:500px;background:url(/images/nokia_33110.png) no-repeat;color:#ffffff;padding:70px 110px;">
        <div id="pedestre-data" style="position:absolute;background:#329367;top:120px;left:28px;width:155px;height:116px;border-radius:15px;color:#000000;padding:5px 8px;font-size:12px;">
            <p style="margin:0px;margin-bottom:5px;"><b>POSITION:</b>
                <br><span id="pedestre-lat">0.0</span>, <span id="pedestre-long">0.0</span></p>
            <p style="margin:0px;"><b>STATUS:</b> <br><span id="pedestreNotification" class="safe-green">No crosswalks.</span></p>
        </div>
    </div>
</div>

    <div id="map_canvas" style="width:100%;height:100%;"></div>

</div>


<script>
var w = c.width = window.innerWidth,
    h = c.height = window.innerHeight,
    ctx = c.getContext( '2d' ),

    minDist = 10,
    maxDist = 30,
    initialWidth = 10,
    maxLines = 100,
    initialLines = 4,
    speed = 5,

    lines = [],
    frame = 0,
    timeSinceLast = 0,

    dirs = [
   // straight x, y velocity
      [ 0, 1 ],
      [ 1, 0 ],
      [ 0, -1 ],
        [ -1, 0 ],
   // diagonals, 0.7 = sin(PI/4) = cos(PI/4)
      [ .7, .7 ],
      [ .7, -.7 ],
      [ -.7, .7 ],
      [ -.7, -.7]
    ],
    starter = { // starting parent line, just a pseudo line

      x: w / 2,
      y: h / 2,
      vx: 0,
      vy: 0,
      width: initialWidth
    };

function init() {

  lines.length = 0;

  for( var i = 0; i < initialLines; ++i )
    lines.push( new Line( starter ) );

  ctx.fillStyle = '#222';
  ctx.fillRect( 0, 0, w, h );

  // if you want a cookie ;)
  // ctx.lineCap = 'round';
}
function getColor( x ) {

  return 'hsl( hue, 80%, 50% )'.replace(
    'hue', x / w * 360 + frame
  );
}
function anim() {

  window.requestAnimationFrame( anim );

  ++frame;

  ctx.shadowBlur = 0;
  ctx.fillStyle = 'rgba(0,0,0,.02)';
  ctx.fillRect( 0, 0, w, h );
  ctx.shadowBlur = .5;

  for( var i = 0; i < lines.length; ++i )

    if( lines[ i ].step() ) { // if true it's dead

      lines.splice( i, 1 );
      --i;

    }

  // spawn new

  ++timeSinceLast

  if( lines.length < maxLines && timeSinceLast > 10 && Math.random() < .5 ) {

    timeSinceLast = 0;

    lines.push( new Line( starter ) );

    // cover the middle;
    ctx.fillStyle = ctx.shadowColor = getColor( starter.x );
    ctx.beginPath();
    ctx.arc( starter.x, starter.y, initialWidth, 0, Math.PI * 2 );
    ctx.fill();
  }
}

function Line( parent ) {

  this.x = parent.x | 0;
  this.y = parent.y | 0;
  this.width = parent.width / 1.25;

  do {

    var dir = dirs[ ( Math.random() * dirs.length ) |0 ];
    this.vx = dir[ 0 ];
    this.vy = dir[ 1 ];

  } while (
    ( this.vx === -parent.vx && this.vy === -parent.vy ) || ( this.vx === parent.vx && this.vy === parent.vy) );

  this.vx *= speed;
  this.vy *= speed;

  this.dist = ( Math.random() * ( maxDist - minDist ) + minDist );

}
Line.prototype.step = function() {

  var dead = false;

  var prevX = this.x,
      prevY = this.y;

  this.x += this.vx;
  this.y += this.vy;

  --this.dist;

  // kill if out of screen
  if( this.x < 0 || this.x > w || this.y < 0 || this.y > h )
    dead = true;

  // make children :D
  if( this.dist <= 0 && this.width > 1 ) {

    // keep yo self, sometimes
    this.dist = Math.random() * ( maxDist - minDist ) + minDist;

    // add 2 children
    if( lines.length < maxLines ) lines.push( new Line( this ) );
    if( lines.length < maxLines && Math.random() < .5 ) lines.push( new Line( this ) );

    // kill the poor thing
    if( Math.random() < .2 ) dead = true;
  }

  ctx.strokeStyle = ctx.shadowColor = getColor( this.x );
  ctx.beginPath();
  ctx.lineWidth = this.width;
  ctx.moveTo( this.x, this.y );
  ctx.lineTo( prevX, prevY );
  ctx.stroke();

  if( dead ) return true
}

init();
anim();

window.addEventListener( 'resize', function() {

  w = c.width = window.innerWidth;
  h = c.height = window.innerHeight;
  starter.x = w / 2;
  starter.y = h / 2;

  init();
} )
</script>

<script>
/*function simulationStart() {*/
$( document ).ready(function() {
$("#simulStat").on("click", function(){
//CHANGE GMAPS.JS GLOBAL VALUES
zoom = parseInt($('#config-form').find('input[name="zoom"]').val());
globalTimmer = parseInt($('#config-form').find('input[name="timmer"]').val());
tickTimmer = parseInt($('#config-form').find('input[name="carVel"]').val());
step = parseFloat($('#config-form').find('input[name="carDist"]').val());
pedestreMove = parseFloat($('#config-form').find('input[name="pedestreDist"]').val());
pedestreTick = parseInt($('#config-form').find('input[name="pedestreVel"]').val());
waitSeconds = parseInt($('#config-form').find('input[name="lightsTimmer"]').val());
carRadius = parseInt($('#config-form').find('input[name="carRadius"]').val());
pedestreRadius = parseInt($('#config-form').find('input[name="pedestreRadius"]').val());
carStops_temp = $('#config-form').find('input[name="stops"]').val();

if(carStops_temp=='false') {carStops=false}
else {carStops=true}

$('#simulation').css('visibility','visible');
$('#config-main').css('display','none');
return false;
})
});
</script>

<%- include('footer'); -%>
